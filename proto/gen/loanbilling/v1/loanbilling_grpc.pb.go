// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: loanbilling/v1/loanbilling.proto

package loanbillingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoanBillingService_GetOutstanding_FullMethodName = "/loanbilling.v1.LoanBillingService/GetOutstanding"
	LoanBillingService_IsDelinquent_FullMethodName   = "/loanbilling.v1.LoanBillingService/IsDelinquent"
	LoanBillingService_MakePayment_FullMethodName    = "/loanbilling.v1.LoanBillingService/MakePayment"
)

// LoanBillingServiceClient is the client API for LoanBillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanBillingServiceClient interface {
	// get the outstanding balance
	GetOutstanding(ctx context.Context, in *GetOutstandingRequest, opts ...grpc.CallOption) (*GetOutstandingResponse, error)
	// check if a loan account is delinquent
	IsDelinquent(ctx context.Context, in *IsDelinquentRequest, opts ...grpc.CallOption) (*IsDelinquentResponse, error)
	// make repayment to a loan account
	MakePayment(ctx context.Context, in *MakePaymentRequest, opts ...grpc.CallOption) (*MakePaymentResponse, error)
}

type loanBillingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanBillingServiceClient(cc grpc.ClientConnInterface) LoanBillingServiceClient {
	return &loanBillingServiceClient{cc}
}

func (c *loanBillingServiceClient) GetOutstanding(ctx context.Context, in *GetOutstandingRequest, opts ...grpc.CallOption) (*GetOutstandingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOutstandingResponse)
	err := c.cc.Invoke(ctx, LoanBillingService_GetOutstanding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanBillingServiceClient) IsDelinquent(ctx context.Context, in *IsDelinquentRequest, opts ...grpc.CallOption) (*IsDelinquentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsDelinquentResponse)
	err := c.cc.Invoke(ctx, LoanBillingService_IsDelinquent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanBillingServiceClient) MakePayment(ctx context.Context, in *MakePaymentRequest, opts ...grpc.CallOption) (*MakePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakePaymentResponse)
	err := c.cc.Invoke(ctx, LoanBillingService_MakePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanBillingServiceServer is the server API for LoanBillingService service.
// All implementations must embed UnimplementedLoanBillingServiceServer
// for forward compatibility.
type LoanBillingServiceServer interface {
	// get the outstanding balance
	GetOutstanding(context.Context, *GetOutstandingRequest) (*GetOutstandingResponse, error)
	// check if a loan account is delinquent
	IsDelinquent(context.Context, *IsDelinquentRequest) (*IsDelinquentResponse, error)
	// make repayment to a loan account
	MakePayment(context.Context, *MakePaymentRequest) (*MakePaymentResponse, error)
	mustEmbedUnimplementedLoanBillingServiceServer()
}

// UnimplementedLoanBillingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanBillingServiceServer struct{}

func (UnimplementedLoanBillingServiceServer) GetOutstanding(context.Context, *GetOutstandingRequest) (*GetOutstandingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutstanding not implemented")
}
func (UnimplementedLoanBillingServiceServer) IsDelinquent(context.Context, *IsDelinquentRequest) (*IsDelinquentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDelinquent not implemented")
}
func (UnimplementedLoanBillingServiceServer) MakePayment(context.Context, *MakePaymentRequest) (*MakePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakePayment not implemented")
}
func (UnimplementedLoanBillingServiceServer) mustEmbedUnimplementedLoanBillingServiceServer() {}
func (UnimplementedLoanBillingServiceServer) testEmbeddedByValue()                            {}

// UnsafeLoanBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanBillingServiceServer will
// result in compilation errors.
type UnsafeLoanBillingServiceServer interface {
	mustEmbedUnimplementedLoanBillingServiceServer()
}

func RegisterLoanBillingServiceServer(s grpc.ServiceRegistrar, srv LoanBillingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoanBillingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoanBillingService_ServiceDesc, srv)
}

func _LoanBillingService_GetOutstanding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutstandingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanBillingServiceServer).GetOutstanding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanBillingService_GetOutstanding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanBillingServiceServer).GetOutstanding(ctx, req.(*GetOutstandingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanBillingService_IsDelinquent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDelinquentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanBillingServiceServer).IsDelinquent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanBillingService_IsDelinquent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanBillingServiceServer).IsDelinquent(ctx, req.(*IsDelinquentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanBillingService_MakePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanBillingServiceServer).MakePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanBillingService_MakePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanBillingServiceServer).MakePayment(ctx, req.(*MakePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanBillingService_ServiceDesc is the grpc.ServiceDesc for LoanBillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanBillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loanbilling.v1.LoanBillingService",
	HandlerType: (*LoanBillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOutstanding",
			Handler:    _LoanBillingService_GetOutstanding_Handler,
		},
		{
			MethodName: "IsDelinquent",
			Handler:    _LoanBillingService_IsDelinquent_Handler,
		},
		{
			MethodName: "MakePayment",
			Handler:    _LoanBillingService_MakePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loanbilling/v1/loanbilling.proto",
}
